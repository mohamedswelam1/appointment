// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PROVIDER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  EXPIRED
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole      @default(USER)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  provider          Provider?
  bookings          Booking[]
}

model Provider {
  id                String        @id @default(uuid())
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization    String?
  description       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  timeSlots         TimeSlot[]
}

model TimeSlot {
  id                String        @id @default(uuid())
  providerId        String
  provider          Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  startTime         DateTime
  endTime           DateTime
  duration          Int           // Duration in minutes
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  booking           Booking?

  @@index([providerId])
  @@index([startTime, endTime])
}

model Booking {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeSlotId        String            @unique
  timeSlot          TimeSlot          @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  status            AppointmentStatus @default(PENDING)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  reminderSent      Boolean           @default(false)

  @@index([userId])
  @@index([status])
}
